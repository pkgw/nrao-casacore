import os
import sys

# Put the package name here, e.g. casa, tables
PACKAGE="measures"
DEPS="casa tables scimath_f scimath".split()

# general options
opts = Options( 'options.cfg', ARGUMENTS )

opts.Add(PathOption("casacoreroot", "The location of casacore/casa",
                    "/usr/local"))
opts.Add(("lapackroot", 
          "The root directory where lapack is installed", None))
opts.Add(("lapacklibdir", "The lapack library location", None))
opts.Add(("lapacklib",
          "The lapack library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("blasroot", 
          "The root directory where blas is installed", None))
opts.Add(("blaslibdir", "The blas library location", None))
opts.Add(("blaslib",
          "The blas library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("datadir", "The location of measures data tables (geodetic, ephemerides)", None))

env = Environment(
		  ENV = { 'PATH' : os.environ[ 'PATH' ],
			  'HOME' : os.environ[ 'HOME' ]			  
			  },
		  options=opts
		  )
# keep a local sconsign database, rather than in very directory
env.SConsignFile()

env["PACKAGE"] = PACKAGE

env["casaincdir"] = [os.path.join(env["casacoreroot"],"include","casacore")]
env["casalibdir"] = [os.path.join(env["casacoreroot"],"lib")]
env["casashrdir"] = [os.path.join(env["casacoreroot"],"share","casacore")]
#env["ENV"]["AIPSPATH"] = env["casacoreroot"]

env.Tool('casaoptions', env["casashrdir"])
# Add common options
env.AddCommonOptions(opts)
env.AddFortranOptions(opts)
env.Tool('installer', env["casashrdir"])
# add installer options, e.g. prefix
env.AddInstallerOptions( opts )
# add them into environment
opts.Update( env )
# cache them for the next run
opts.Save( 'options.cfg', env)
Help( opts.GenerateHelpText( env ) )
env.Tool('buildenv', env["casashrdir"])
env.Tool('utils', env["casashrdir"])
env.Tool('casa', env["casashrdir"])
env.Tool('assaytest', env["casashrdir"])
env["ASSAYCOM"] = os.path.join(env["casashrdir"][0], "casacore_assay")

# Auto configure
if not env.GetOption('clean'):
    conf = Configure(env)
    conf.env.CheckFortran(conf)
    # test for blas/lapack
    blasname = conf.env.get("blaslib", "blas").split(",")
    conf.env.AddCustomPackage("blas")
    blasname.reverse()
    for b in blasname:
        if not conf.CheckLib(b, autoadd=0): Exit(1)
        conf.env.PrependUnique(LIBS=b)
    lapackname = conf.env.get("lapacklib", "lapack").split(",")
    conf.env.AddCustomPackage("lapack")
    lapackname.reverse()
    for l in lapackname:
        if not conf.CheckLib(l, autoadd=0): Exit(1)
        conf.env.PrependUnique(LIBS=l)
    ddir = os.path.join(conf.env["casashrdir"][0], 'data')
    if conf.env.has_key("datadir"):
        dir = os.path.expanduser(os.path.expandvars(conf.env["datadir"]))
        if os.path.exists(dir) \
                and os.path.exists(os.path.join(dir, 'ephemerides')) \
                and os.path.exists(os.path.join(dir, 'geodetic')):
            ddir = dir
        else:
            print """Warning: measures data directory given doesn't contain 
geodetic and ephemerides.
Using '%s' as default search location""" % ddir
        
    # Note the escaped single quotes to handle the string in the define
    conf.env.PrependUnique(CPPFLAGS=['-DCASADATA=\'"%s"\'' % ddir])
    env = conf.Finish()
else:
    Execute(Delete("options.cfg"))

# create the installer which handles installing the final build
installer = env.Installer()

# to find package based includes
env.Append(CPPPATH=['#'])
env.AppendUnique(CPPPATH=env["casaincdir"])
env.AppendUnique(LIBPATH=env["casalibdir"])
for dep in DEPS:
    env.Prepend(LIBS=["casa_"+dep])

# Replace some builder commands (lex,yacc) with custom versions
env.CustomCasaCom()
for bopt in env["build"]:
    # create an environment copy with teh dbg/opt compiler flags
    buildenv = env.BuildEnv(bopt)
    buildenv["buildtype"] = bopt
    # buildir name
    buildenv["BUILDDIR"] = Dir("#/build_%s/%s" % (env.PlatformIdent(), bopt))
    buildenv["BUILDDIR_FORT"] = Dir("#/build_%s/%s/%s" % (env.PlatformIdent(), 
						      bopt, "fortran"))
    buildenv["BUILDDIR_APPS"] = Dir("#/build_%s/%s/%s" % (env.PlatformIdent(), 
						      bopt, "apps"))

    env.SConscript(["%s/SConscript" % env["PACKAGE"]], 
		   build_dir= buildenv["BUILDDIR"],
		   duplicate=0, exports=["buildenv", "installer"]) 
    env.SConscript(["%s/SConscript" % "fortran"],
		   duplicate=0, exports=["buildenv", "installer"],
		   build_dir=buildenv["BUILDDIR_FORT"])
    env.SConscript(["%s/SConscript" % "apps"],
		   duplicate=0, exports=["buildenv", "installer"],
		   build_dir=buildenv["BUILDDIR_APPS"])

